
'''
Простые задания

1. Даны 2 строки long_phrase и short_phrase. Напишите код, который проверяет действительно ли длинная фраза long_phrase длиннее короткой short_phrase. И выводит True или False в зависимости от результата сравнения.
long_phrase = 'Насколько проще было бы писать программы, если бы не заказчики'
short_phrase = '640Кб должно хватить для любых задач. Билл Гейтс (по легенде)'
'''
long_phrase = 'Насколько проще было бы писать программы, если бы не заказчики'
short_phrase = '640Кб должно хватить для любых задач. Билл Гейтс (по легенде)'

print(len(long_phrase) > len(short_phrase))



'''
2. Дана строка text. Определите какая из двух букв встречается в нем чаще - 'а' или 'и'.
text = 'Если программист в 9-00 утра на работе, значит, он там и ночевал'
'''
text = 'Если программист в 9-00 утра на работе, значит, он там и ночевал'
if text.count("а") > text.count("и"):
	print("a чаще")
else:
	print("b чаще")



'''
3. Дано значение объема файла в байтах. Напишите перевод этого значения в мегабайты в формате:
'Объем файла равен 213.68Mb'

P. S. Найдите определение килобайта. Это не 1000 байт.
'''
sampleSizeInBites = 48372390328
sizeInMegaBites = sampleSizeInBites/1048576
print (f"Объем файла равен {sizeInMegaBites:.2f}MB")



'''
4. Выведите на экран значение синуса 30 градусов с помощью метода math.sin.
'''
print(math.sin(math.radians(30)))



'''
5. В прошлом задании у вас скорее всего не получилось точного значения 0.5 из-за конечной точности вычисления синуса. Но почему некоторые простые операции также могут давать неточный результат? Попробуйте вывести на экран результат операции 0.1 + 0.2. Почему результат неточен?


Это потому, что .1 не может быть точно представлен в двоичном представлении с плавающей запятой. Если попытаться 
 >>> .1 
Python ответит с помощью .1 поскольку он печатает только до определенной точности, но уже есть небольшая ошибка округления. 
Не все числа с плавающей запятой точно представлены на конечной машине. Ни 0,1, ни 0,2 точно не представлены в двоичной плавающей точке.
Число точно представимо, если оно имеет вид a / b, где a и b – целые числа, а b – степень 2. Тип данных должен иметь достаточно большое значение для хранения номера.

'''

'''
Задания посложнее
В переменных a и b записаны 2 различных числа. Вам необходимо написать код, который меняет значения a и b местами без использования третьей переменной.
'''
a = 3
b = 12
a,b = b,a
print(a,b)


'''
Дано число в двоичной системе счисления: num=10011. Напишите алгоритм перевода этого числа в привычную нам десятичную систему счисления.
Возможно, вам понадобится цикл прохождения всех целых чисел от 0 до m:
for n in range(m)
'''
num = 10011
digit = str(num)        
length=len(digit)                    
dec=0          
for i in range(0, length):               
    dec=dec+int(digit[i])*(2**(length-i-1))           
print(dec)



